// Generated by Dagger (https://dagger.dev).
package com.randyahx.login_data.di;

import com.randyahx.login_data.remote.LoginApi;
import com.randyahx.login_domain.repository.LoginRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LoginAppModule_ProvideCoinRepositoryFactory implements Factory<LoginRepository> {
  private final LoginAppModule module;

  private final Provider<LoginApi> apiProvider;

  public LoginAppModule_ProvideCoinRepositoryFactory(LoginAppModule module,
      Provider<LoginApi> apiProvider) {
    this.module = module;
    this.apiProvider = apiProvider;
  }

  @Override
  public LoginRepository get() {
    return provideCoinRepository(module, apiProvider.get());
  }

  public static LoginAppModule_ProvideCoinRepositoryFactory create(LoginAppModule module,
      Provider<LoginApi> apiProvider) {
    return new LoginAppModule_ProvideCoinRepositoryFactory(module, apiProvider);
  }

  public static LoginRepository provideCoinRepository(LoginAppModule instance, LoginApi api) {
    return Preconditions.checkNotNullFromProvides(instance.provideCoinRepository(api));
  }
}
