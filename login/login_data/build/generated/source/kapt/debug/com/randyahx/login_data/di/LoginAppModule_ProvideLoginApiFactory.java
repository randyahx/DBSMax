// Generated by Dagger (https://dagger.dev).
package com.randyahx.login_data.di;

import com.randyahx.login_data.remote.LoginApi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LoginAppModule_ProvideLoginApiFactory implements Factory<LoginApi> {
  private final LoginAppModule module;

  private final Provider<OkHttpClient> clientProvider;

  public LoginAppModule_ProvideLoginApiFactory(LoginAppModule module,
      Provider<OkHttpClient> clientProvider) {
    this.module = module;
    this.clientProvider = clientProvider;
  }

  @Override
  public LoginApi get() {
    return provideLoginApi(module, clientProvider.get());
  }

  public static LoginAppModule_ProvideLoginApiFactory create(LoginAppModule module,
      Provider<OkHttpClient> clientProvider) {
    return new LoginAppModule_ProvideLoginApiFactory(module, clientProvider);
  }

  public static LoginApi provideLoginApi(LoginAppModule instance, OkHttpClient client) {
    return Preconditions.checkNotNullFromProvides(instance.provideLoginApi(client));
  }
}
